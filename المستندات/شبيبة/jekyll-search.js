! الوظيفة  e ( t ، n ، r ) { function  s ( o ، u ) { if ( ! n [ o ]) { if ( ! t [ o ]) { var  a = "function" == typeof  تتطلب && تتطلب ؛ إذا ( ! u && a ) إرجاع  a ( o ،! 0 ) ؛ لو( i ) إرجاع  i ( o ،! 0 ) ؛ طرح  خطأ جديد  ( "لا يمكن العثور على الوحدة النمطية" " + o + " "" )} var f = n [ o ] = { الصادرات : {}}؛ ر [ س ] [ 0 ]. استدعاء ( f . الصادرات ، الوظيفة ( هـ ) { var n = t [ o ] [ 1  ] [ هـ ] ؛ إرجاع  s ( n ؟ n : e )} ، و ، و . الصادرات ، e ، t ، n ، r )} إرجاع  n [ o ]. الصادرات } لـ ( var  i = "function" == typeof  تتطلب && تتطلب ، o = 0 ؛ o < r . length ؛ o++ ) s ( r [ o ]) ؛ return  s } ( { 1 : [ الوظيفة ( تتطلب الوحدة النمطية ) { الوحدة النمطية . الصادرات = الوظيفة ( ) { الوظيفة المستلمة _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ) { xhr   . onreadystatechange = function () { if ( ivedResponse ( xhr )) حاول { callback ( null ، JSON . parse ( xhr . responseText ))} catch ( err ) { callback ( err ، null )}}} var  self = this ؛ النفس . تحميل = الوظيفة ( الموقع ، رد الاتصال ) { var xhr = نافذة . طلب XMLHttp ؟ XMLHttpRequest جديد  : ActiveXObject الجديد ( "Microsoft.XMLHTTP" ) ؛ xhr . open ( "GET" ، location ،! 0 )، handleResponse ( xhr ، callback ) ، xhr . send ()}}} ، {}] ، 2 : [ الوظيفة ( تتطلب ، وحدة ) { function FuzzySearchStrategy () { function   createFuzzyRegExpFromString ( سلسلة ) { return  new  RegExp ( string . split ( "" ). Join ( ". *؟" )، "gi" )} var  self = this ؛ النفس . مباريات = وظيفة ( سلسلة ، crit ) { إرجاع "سلسلة" ! = typeof  سلسلة ؟! 1 :( string = string . trim ()، !! string. match ( createFuzzyRegExpFromString ( crit )))} الوحدة النمطية . الصادرات = new  FuzzySearchStrategy }، {}]، 3 : [ function ( تتطلب ، module ) { function  LiteralSearchStrategy () { function  doMatch ( string ، crit ) { return  string . toLowerCase (). indexOf ( crit . toLowerCase ()) > = 0 } var النفس = هذا ؛ النفس . مباريات = وظيفة ( سلسلة ، crit ) { إرجاع "سلسلة" ! = typeof  سلسلة ؟! 1 :( string = string . trim ()، doMatch ( string ، crit ))}} module . الصادرات = new  LiteralSearchStrategy } ، {}] ، 4 : [ الوظيفة ( تتطلب ، وحدة ) { وحدة. الصادرات = وظيفة () { وظيفة  findMatches ( تخزين ، نقد ، إستراتيجية ) { لـ ( var  data = store . get ()، i = 0 ؛ i < data . length && match . length < limit ؛ i ++ ) findMatchesInObject ( data [ i ] ، نقد ، استراتيجية ) ؛إرجاع  مباريات } function  findMatchesInObject ( obj ، crit ، Strategy ) { for ( var  key  in  obj ) if ( Strategy . matches ( obj [ key ]، crit )) { match . دفع ( obj ) ؛ break }} function  getSearchStrategy () { return  fuzzy ؟ إستراتيجية : literalSearchStrategy }var  self = this ، يتطابق مع = [] ، fuzzy =! 1 ، Limit = 10 ، fuzzySearchStrategy = تتطلب ( "./SearchStrategies/fuzzy" ) ، literalSearchStrategy = تتطلب ( "./SearchStrategies/literal" ) ؛ النفس . setFuzzy = وظيفة ( _fuzzy ) { غامض = !! _fuzzy } ، ذاتي . setLimit = وظيفة ( _limit ) {الحد = parseInt ( _limit ، 10 ) || حد } ، النفس . search = function ( data ، crit ) { return  crit ؟ ( مباريات . length = 0 ، findMatches ( data ، crit ، getSearchStrategy ())): []}}}، { "./SearchStrategies/fuzzy" : 2 ، "./SearchStrategies/literal" : 3 }]، 5 : [وظيفة ( تتطلب ، وحدة ) { وحدة . الصادرات = function ( _store ) { function  isObject ( obj ) { return !! obj && "[كائن كائن]" == كائن . النموذج الأولي . toString . دالة call ( obj )} isArray ( obj ) { return !! obj && "[مصفوفة الكائن]" == كائن . النموذج المبدئي . toString . call ( obj )} function  addObject ( data ) { return  store . push ( data )، data } function  addArray ( data ) { for ( var  added = []، i = 0 ؛ i < data . length ؛ i ++ ) isObject ( data [ i ]) && added .push ( addObject ( data [ i ])) ؛ إرجاع  وأضاف } var  self = this ، store = [] ؛ isArray ( _store ) && addArray ( _store ) ، self . clear = function () { مخزن الإرجاع  . الطول = 0 ، مخزن } ، النفس . get = function () { return store } ، النفس . وضع = وظيفة ( بيانات ) { إرجاع  isObject ( بيانات ) ؟ addObject ( بيانات ): isArray ( بيانات ) ؟ addArray ( البيانات ): void  0 }}} ، {}] ، 6 : [ الوظيفة ( تتطلب ، وحدة ) { module . الصادرات = الوظيفة () { var  self = this ، templatePattern =/\{(.*؟)\}/g ؛ النفس . setTemplatePattern = وظيفة ( newTemplatePattern ) { templatePattern = newTemplatePattern } ، self . تقديم = وظيفة ( t ، بيانات ) { إرجاع  t . استبدال ( templatePattern ، function ( match ، prop ) { return  data [ prop ] || match })}}}، {}]، 7 : [ function( تتطلب ) { ! وظيفة ( نافذة ) { "استخدام صارم" ؛ function  SimpleJekyllSearch () { function  initWithJSON () { store . ضع ( opt . dataSource )، registerInput ()} الوظيفة  initWithURL ( url ) { jsonLoader . load ( url ، function ( err ، json ) { err ؟ throwError ( "فشل في الحصول على JSON ("+ url + ")" ) :( store . put ( json )، registerInput ())})} وظيفة  throwError ( رسالة ) { رمي  خطأ جديد  ( "SimpleJekyllSearch ---" + message )} وظيفة validateOptions ( _opt ) { لـ ( var i = 0 ؛ i < requiredOptions . length ؛ i ++ ) { var req =   requiredOptions [ i ] ؛ _opt [ مطلوب ] || throwError ( "يجب عليك تحديد" + req )}} وظيفة  تعيين خيارات ( _opt ) { لـ ( خيار var  in opt ) opt [ option ] = _opt [ option ] || opt [ option ]} الوظيفة isJSON ( json ) { try { return json     مثيل من  Object && JSON . تحليل ( JSON . stringify ( json ))} catch ( e ) { return ! 1 }} function  blankResultsContainer () { opt . النتائج _ innerHTML = "" } function  appendToResultsContainer ( نص ) { opt . النتائج _ innerHTML + = text } وظيفة  registerInput () {اختيار . البحث _ addEventListener ( "keyup" ، function ( e ) { return  0 == e . target . value . length ؟ void  blankResultsContainer (): void  render ( searcher . search ( store ، e . target . value ))})} عرض الوظيفة  ( النتائج ) { if ( blankResultsContainer() ، 0 == نتائج . length ) return  appendToResultsContainer ( opt . noResultsText ) ؛ لـ ( var  i = 0 ؛ i < results . length ؛ i ++ ) appendToResultsContainer ( Templater . render ( opt . searchResultTemplate ، results [ i ]))} var  self = this ،requiredOptions = [ "searchInput" ، "resultsContainer" ، "dataSource" ]، opt = { searchInput : null ، resultsContainer : null ، dataSource : []، searchResultTemplate : '<li> <a href = "{url}" title = " {desc} "> {title} </a> </li> ' ، noResultsText : " لم يتم العثور على نتائج " ، الحد : 10 ، غامض :! 1 } ؛ النفس ._opt ) { validateOptions ( _opt )، assignOptions ( _opt )، isJSON ( opt . dataSource ) ؟ initWithJSON ( opt . dataSource ): initWithURL ( opt . dataSource )}} var  Searcher = يتطلب ( "./Searcher" ) ، Templater = يتطلب ( "./Templater" ) ، Store = يتطلب ( "./Store" ) ،JSONLoader = يتطلب ( "./JSONLoader" ) ، الباحث = باحث جديد  ، Templater = new Templater ، store = new Store ، jsonLoader = new JSONLoader ؛ نافذة . SimpleJekyllSearch = new SimpleJekyllSearch } ( نافذة ، مستند )} ، { "./JSONLoader" : 1 ، "./Searcher" : 4 ، "./Store" : 5    ، "./Templater" : 6 }]} ، {} ، [ 7 ]) ؛
